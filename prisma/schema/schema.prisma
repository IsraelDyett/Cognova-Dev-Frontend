generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "prismaSchemaFolder"]
  engineType      = "library"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Workspace {
  id           String          @id @default(cuid())
  displayName  String
  name         String          @unique
  planId       String?
  ownerId      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  bots         Bot[]
  businesses   Business[]
  payments     Payment[]
  sources      Source[]
  subscription Subscription?
  vectors      Vector[]
  users        WorkspaceUser[]
  owner        User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  plan         Plan?           @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@index([id, planId])
  @@map("workspaces")
}

model WorkspaceUser {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_users")
}

model Model {
  id          String   @id @default(cuid())
  displayName String
  name        String   @unique
  planId      String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Bot         Bot[]
  plan        Plan?    @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@map("models")
}

model Source {
  id            String       @id @default(cuid())
  workspaceId   String
  techniqueId   String?
  title         String
  url           String
  status        String
  contentType   String
  contentLength Int
  contentHash   String
  syncTime      Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bots          BotSources[]
  technique     Technique?   @relation(fields: [techniqueId], references: [id])
  workspace     Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  syncs         Sync[]
  vectors       Vector[]

  @@map("sources")
}

model Sync {
  id          String    @id @default(cuid())
  sourceId    String
  message     String?
  status      String
  startedAt   DateTime?
  succeedAt   DateTime?
  errorAt     DateTime?
  cancelledAt DateTime?
  source      Source    @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@map("syncs")
}

model Technique {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  planId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sources     Source[]
  plan        Plan?    @relation(fields: [planId], references: [id])

  @@map("techniques")
}

model Vector {
  id           String                 @id @default(cuid())
  workspaceId  String
  sourceId     String
  embedding    Unsupported("vector")?
  chunkContent String
  metadata     Json
  chunkLength  Int
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  source       Source                 @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  workspace    Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("vectors")
}
