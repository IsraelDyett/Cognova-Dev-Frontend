model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  password        String
  image           String?
  roleId          String?
  emailVerified   Boolean         @default(false)
  uplineId        String?
  lastLoggedAt    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  sessions        Session[]
  roles           Role?           @relation(fields: [roleId], references: [id])
  upline          User?           @relation("UserUpline", fields: [uplineId], references: [id])
  downlines       User[]          @relation("UserUpline")
  workspaces      WorkspaceUser[]
  ownedWorkspaces Workspace[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String
  ipAddress    String?
  device       String?
  os           String?
  browser      String?
  status       String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  displayName String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  Users       User[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  roleId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("permissions")
}
