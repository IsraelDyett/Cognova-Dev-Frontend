model Source {
  id            String       @id @default(cuid())
  workspaceId   String
  techniqueId   String?
  title         String
  url           String
  status        String
  contentType   String
  contentLength Int
  contentHash   String
  syncTime      Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  bots          BotSources[]
  technique     Technique?   @relation(fields: [techniqueId], references: [id])
  workspace     Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  syncs         Sync[]
  vectors       Vector[]

  @@map("sources")
}

model Sync {
  id          String    @id @default(cuid())
  sourceId    String
  message     String?
  status      String
  startedAt   DateTime?
  succeedAt   DateTime?
  errorAt     DateTime?
  cancelledAt DateTime?
  source      Source    @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@map("syncs")
}

model Technique {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  planId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  sources     Source[]
  plan        Plan?    @relation(fields: [planId], references: [id])

  @@map("techniques")
}

model Vector {
  id                   String                 @id @default(cuid())
  workspaceId          String
  sourceId             String
  embedding            Unsupported("vector")?
  markdownChunkContent String?                @db.Text
  chunkContent         String
  metadata             Json
  chunkLength          Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  source               Source                 @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  workspace            Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("vectors")
}
