model Subscription {
    id             String       @id @default(uuid())
    organizationId String       @unique
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    planId         String?
    pan            Plan?        @relation(fields: [planId], references: [id], onDelete: SetNull)
    status         String
    startDate      DateTime
    endDate        DateTime
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    payments       Payment[]

    @@map("subscriptions")
}

model Plan {
    id            String         @id @default(uuid())
    name          String
    slugName      String         @unique
    billingCycle  BillingCycle   @default(MONTHLY)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    subscriptions Subscription[]
    features      PlanFeature[]
    llm_models    LLModel[]
    techniques    Technique[]
    organizations Organization[]

    @@map("plans")
}

model PlanFeature {
    id          String   @id @default(uuid())
    planId      String
    pan         Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
    name        String
    description String?
    allowed     Boolean  @default(true)
    createdAt   DateTime @default(now())

    @@map("plan_features")
}

model Payment {
    id              String         @id @default(uuid())
    organizationId  String
    organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    subscriptionId  String
    subscription    Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
    amount          Float
    paymentMethodId String?
    paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)
    status          PaymentStatus  @default(PENDING)
    paidAt          DateTime
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    invoices        Invoice[]

    @@map("payments")
}

model PaymentMethod {
    id        String              @id @default(uuid())
    name      String
    slugName  String              @unique
    status    PaymentMethodStatus @default(ACTIVE)
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt
    payments  Payment[]

    @@map("payment_methods")
}

model Invoice {
    id          String   @id @default(uuid())
    paymentId   String?
    payment     Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade)
    invoiceCode String
    issuedAt    DateTime
    dueDate     DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("invoices")
}
